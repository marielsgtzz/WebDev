/*! For license information please see 502.3c1f7652.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunk_kentcdodds_react_fundamentals=self.webpackChunk_kentcdodds_react_fundamentals||[]).push([[502],{9502:function(e,n,t){t.r(n);var a=t(2556);function s(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a",h3:"h3",pre:"pre",span:"span",ol:"ol"},e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Forms"}),"\n",(0,a.jsx)(n.h2,{children:"\ud83d\udcdd Your Notes"}),"\n",(0,a.jsxs)(n.p,{children:["Elaborate on your learnings here in ",(0,a.jsx)(n.code,{children:"src/exercise/06.md"})]}),"\n",(0,a.jsx)(n.h2,{children:"Background"}),"\n",(0,a.jsx)(n.p,{children:"In React, there actually aren't a ton of things you have to learn to interact\nwith forms beyond what you can do with regular DOM APIs and JavaScript. Which I\nthink is pretty awesome."}),"\n",(0,a.jsxs)(n.p,{children:["You can attach a submit handler to a form element with the ",(0,a.jsx)(n.code,{children:"onSubmit"})," prop. This\nwill be called with the submit event which has a ",(0,a.jsx)(n.code,{children:"target"}),". That ",(0,a.jsx)(n.code,{children:"target"})," is a\nreference to the ",(0,a.jsx)(n.code,{children:"<form>"})," DOM node which has a reference to the elements of the\nform which can be used to get the values out of the form!"]}),"\n",(0,a.jsx)(n.h2,{children:"Exercise"}),"\n",(0,a.jsx)(n.p,{children:"Production deploys:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"http://react-fundamentals.netlify.app/isolated/exercise/06.js",children:"Exercise"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"http://react-fundamentals.netlify.app/isolated/final/06.js",children:"Final"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:'In this exercise, we have a form where you can submit a username and then you\'ll\nget an "alert" showing what you typed.'}),"\n",(0,a.jsx)(n.p,{children:"\ud83e\udd89 There are several ways to get the value of the name input:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Via their index: ",(0,a.jsx)(n.code,{children:"event.target.elements[0].value"})]}),"\n",(0,a.jsxs)(n.li,{children:["Via the elements object by their ",(0,a.jsx)(n.code,{children:"name"})," or ",(0,a.jsx)(n.code,{children:"id"})," attribute:\n",(0,a.jsx)(n.code,{children:"event.target.elements.usernameInput.value"})]}),"\n",(0,a.jsx)(n.li,{children:"There's another that I'll save for the extra credit"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Extra Credit"}),"\n",(0,a.jsx)(n.h3,{children:"1. \ud83d\udcaf using refs"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://react-fundamentals.netlify.app/isolated/final/06.extra-1.js",children:"Production deploy"})}),"\n",(0,a.jsxs)(n.p,{children:["Another way to get the value is via a ",(0,a.jsx)(n.code,{children:"ref"})," in React. A ",(0,a.jsx)(n.code,{children:"ref"})," is an object that\nstays consistent between renders of your React component. It has a ",(0,a.jsx)(n.code,{children:"current"}),"\nproperty on it which can be updated to any value at any time. In the case of\ninteracting with DOM nodes, you can pass a ",(0,a.jsx)(n.code,{children:"ref"})," to a React element and React\nwill set the ",(0,a.jsx)(n.code,{children:"current"})," property to the DOM node that's rendered."]}),"\n",(0,a.jsxs)(n.p,{children:["So if you create an ",(0,a.jsx)(n.code,{children:"inputRef"})," object via ",(0,a.jsx)(n.code,{children:"React.useRef"}),", you could access the\nvalue via: ",(0,a.jsx)(n.code,{children:"inputRef.current.value"}),"\n(\ud83d\udcdc",(0,a.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-reference.html#useref",children:"https://reactjs.org/docs/hooks-reference.html#useref"}),")"]}),"\n",(0,a.jsx)(n.p,{children:"Try to get the usernameInput's value using a ref."}),"\n",(0,a.jsx)(n.h3,{children:"2. \ud83d\udcaf Validate lower-case"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://react-fundamentals.netlify.app/isolated/final/06.extra-2.js",children:"Production deploy"})}),"\n",(0,a.jsxs)(n.p,{children:['With React, the way you use state is via a special "hook" called ',(0,a.jsx)(n.code,{children:"useState"}),".\nHere's a simple example of what that looks like:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-jsx",children:(0,a.jsxs)(n.code,{className:"language-jsx",children:[(0,a.jsx)(n.span,{className:"token keyword",children:"function"})," ",(0,a.jsx)(n.span,{className:"token function",children:(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"Counter"})}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"["}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:","})," setCount",(0,a.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token maybe-class-name",children:"React"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"."}),(0,a.jsx)(n.span,{className:"token method function property-access",children:"useState"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token number",children:"0"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword",children:"const"})," ",(0,a.jsx)(n.span,{className:"token function-variable function",children:"increment"})," ",(0,a.jsx)(n.span,{className:"token operator",children:"="})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,a.jsx)(n.span,{className:"token arrow operator",children:"=>"})," ",(0,a.jsx)(n.span,{className:"token function",children:"setCount"}),(0,a.jsx)(n.span,{className:"token punctuation",children:"("}),"count ",(0,a.jsx)(n.span,{className:"token operator",children:"+"})," ",(0,a.jsx)(n.span,{className:"token number",children:"1"}),(0,a.jsx)(n.span,{className:"token punctuation",children:")"}),"\n  ",(0,a.jsx)(n.span,{className:"token keyword control-flow",children:"return"})," ",(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsx)(n.span,{className:"token punctuation",children:"<"}),"button"]})," ",(0,a.jsx)(n.span,{className:"token attr-name",children:"onClick"}),(0,a.jsxs)(n.span,{className:"token script language-javascript",children:[(0,a.jsx)(n.span,{className:"token script-punctuation punctuation",children:"="}),(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"increment",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"})]}),(0,a.jsx)(n.span,{className:"token punctuation",children:">"})]}),(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"count",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsx)(n.span,{className:"token punctuation",children:"</"}),"button"]}),(0,a.jsx)(n.span,{className:"token punctuation",children:">"})]}),"\n",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"React.useState"})," accepts a default initial value and returns an array. Typically\nyou'll destructure that array to get the state and a state updater function."]}),"\n",(0,a.jsxs)(n.p,{children:["\ud83d\udcdc ",(0,a.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-state.html",children:"https://reactjs.org/docs/hooks-state.html"})]}),"\n",(0,a.jsx)(n.p,{children:"In this extra credit, we're going to say that this username input only accepts\nlower-case characters. So if someone types an upper-case character, that's\ninvalid input and we'll show an error message."}),"\n",(0,a.jsx)(n.p,{children:"If we want our form to be dynamic, we'll need a few things:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Component state to store the dynamic values (an error message in our case)"}),"\n",(0,a.jsx)(n.li,{children:"A change handler on the input so we know what the value is as the user\nchanges it and can update the error state."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Once we have that wired up then we can render the error message and disable the\nsubmit button if there's an error."}),"\n",(0,a.jsx)(n.p,{children:"\ud83d\udcb0 This one's a little more tricky, so here are a few things you need to do to\nmake this work:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a ",(0,a.jsx)(n.code,{children:"handleChange"})," function that accepts the change ",(0,a.jsx)(n.code,{children:"event"})," and uses\n",(0,a.jsx)(n.code,{children:"event.target.value"})," to get the value of the input. Remember this event will\nbe triggered on the input, not the form."]}),"\n",(0,a.jsxs)(n.li,{children:["Use the value of the input to determine whether there's an error. There's an\nerror if the user typed any upper-case characters. You can check this really\neasily via ",(0,a.jsx)(n.code,{children:"const isValid = value === value.toLowerCase()"})]}),"\n",(0,a.jsxs)(n.li,{children:["If there's an error, set the error state to ",(0,a.jsx)(n.code,{children:"'Username must be lower case'"}),".\n(\ud83d\udcb0 here's how you do that:\n",(0,a.jsx)(n.code,{children:"setError(isValid ? null : 'Username must be lower case')"}),") and disable the\nsubmit button."]}),"\n",(0,a.jsx)(n.li,{children:"Finally, display the error in an element"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You may consider adding a ",(0,a.jsx)(n.code,{children:'role="alert"'})," to the element you use to display the\nerror to assist with screen reader users."]}),"\n",(0,a.jsxs)(n.p,{children:["Make sure you pass ",(0,a.jsx)(n.code,{children:"handleChange"})," to the ",(0,a.jsx)(n.code,{children:"onChange"})," handler of the ",(0,a.jsx)(n.code,{children:"input"}),"."]}),"\n",(0,a.jsx)(n.h3,{children:"3. \ud83d\udcaf Control the input value"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://react-fundamentals.netlify.app/isolated/final/06.extra-3.js",children:"Production deploy"})}),"\n",(0,a.jsx)(n.p,{children:"Sometimes you have form inputs which you want to programmatically control. Maybe\nyou want to set their value explicitly when the user clicks a button, or maybe\nyou want to change what the value is as the user is typing."}),"\n",(0,a.jsx)(n.p,{children:'This is why React supports Controlled Form inputs. So far in our exercises, all\nof the form inputs have been "uncontrolled" which means that the browser is\nmaintaining the state of the input by itself and we can be notified of changes\nand "query" for the value from the DOM node.'}),"\n",(0,a.jsxs)(n.p,{children:["If we want to explicitly update that value we could do this:\n",(0,a.jsx)(n.code,{children:"inputNode.value = 'whatever'"})," but that's pretty imperative. Instead, React\nallows us to programmatically set the ",(0,a.jsx)(n.code,{children:"value"})," prop on the input like so:"]}),"\n",(0,a.jsx)(n.pre,{className:"language-jsx",children:(0,a.jsxs)(n.code,{className:"language-jsx",children:[(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsxs)(n.span,{className:"token tag",children:[(0,a.jsx)(n.span,{className:"token punctuation",children:"<"}),"input"]})," ",(0,a.jsx)(n.span,{className:"token attr-name",children:"value"}),(0,a.jsxs)(n.span,{className:"token script language-javascript",children:[(0,a.jsx)(n.span,{className:"token script-punctuation punctuation",children:"="}),(0,a.jsx)(n.span,{className:"token punctuation",children:"{"}),"myInputValue",(0,a.jsx)(n.span,{className:"token punctuation",children:"}"})]})," ",(0,a.jsx)(n.span,{className:"token punctuation",children:"/>"})]}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["Once we do that, React ensures that the value of that input can never differ\nfrom the value of the ",(0,a.jsx)(n.code,{children:"myInputValue"})," variable."]}),"\n",(0,a.jsxs)(n.p,{children:["Typically you'll want to provide an ",(0,a.jsx)(n.code,{children:"onChange"}),' handler as well so you can be\nmade aware of "suggested changes" to the input\'s value (where React is basically\nsaying "if I were controlling this value, here\'s what I would do, but you do\nwhatever you want with this").']}),"\n",(0,a.jsxs)(n.p,{children:["Typically you'll want to store the input's value in a state variable (via\n",(0,a.jsx)(n.code,{children:"React.useState"}),") and then the ",(0,a.jsx)(n.code,{children:"onChange"})," handler will call the state updater to\nkeep that value up-to-date."]}),"\n",(0,a.jsxs)(n.p,{children:["Wouldn't it be even cooler if instead of showing an error message we just didn't\nallow the user to enter invalid input? Yeah! In this extra credit I've backed us up\nand removed the error stuff and now we're going to control the input state and\ncontrol the input value. Anytime there's a change we'll call ",(0,a.jsx)(n.code,{children:".toLowerCase()"})," on\nthe value to ensure that it's always the lower case version of what the user\ntypes."]}),"\n",(0,a.jsxs)(n.p,{children:["So we can get rid of our ",(0,a.jsx)(n.code,{children:"error"})," state and instead we'll manage state called\n",(0,a.jsx)(n.code,{children:"username"})," (with ",(0,a.jsx)(n.code,{children:"React.useState"}),") and we'll set the ",(0,a.jsx)(n.code,{children:"username"})," to whatever the\ninput value is. We'll just lowercase the input value before doing so. Then we'll\npass that value to the ",(0,a.jsx)(n.code,{children:"input"}),"'s ",(0,a.jsx)(n.code,{children:"value"})," prop and now it's impossible for users\nto enter an invalid value!"]}),"\n",(0,a.jsx)(n.h2,{children:"\ud83e\udd89 Feedback"}),"\n",(0,a.jsxs)(n.p,{children:["Fill out\n",(0,a.jsx)(n.a,{href:"https://ws.kcd.im/?ws=React%20Fundamentals%20%E2%9A%9B&e=06%3A%20Forms&em=",children:"the feedback form"}),"."]})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(s,e)})):s(e)}},3238:function(e,n,t){var a=t(4519),s=Symbol.for("react.element"),r=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function i(e,n,t){var a,r={},i=null,h=null;for(a in void 0!==t&&(i=""+t),void 0!==n.key&&(i=""+n.key),void 0!==n.ref&&(h=n.ref),n)c.call(n,a)&&!l.hasOwnProperty(a)&&(r[a]=n[a]);if(e&&e.defaultProps)for(a in n=e.defaultProps)void 0===r[a]&&(r[a]=n[a]);return{$$typeof:s,type:e,key:i,ref:h,props:r,_owner:o.current}}n.Fragment=r,n.jsx=i,n.jsxs=i},2556:function(e,n,t){e.exports=t(3238)}}]);
//# sourceMappingURL=502.3c1f7652.chunk.js.map